function New-CpNetworkDevice {
  [CmdletBinding()]
  param (
    [Parameter(
      Mandatory = $false,
      HelpMessage = "A ClearPass session generated by New-CpSession.")]
    [Session]$Session=$global:CpSession,

    [Parameter(
      Mandatory = $true,
      HelpMessage = "Friendly name of network device.")]
    [String]$Name,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "A description of the network device.")]
    [String]$Description,

    [Parameter(
      Mandatory = $true,
      HelpMessage = "The IP address of the network device.")]
    [String]$IpAddress,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "The RAIDUS secret for the network device.")]
    [String]$RadiusSecret,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "The RAIDUS secret for the network device.")]
    [String]$TacacsSecret,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "The name of the network device's vendor.")]
    [String]$VendorName,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "Does the network device support change of authorization (CoA)?")]
    [Bool]$CoaCapable=$true,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "The change of authorization (CoA) port.")]
    [Int16]$CoaPort=3799,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "Is the network device configured for RadSec?")]
    [Bool]$RadSecEnabled=$false,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "Is the network device configured for RadSec?")]
    [Hashtable]$Attributes=$false,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "Don't verify the server certificate.")]
    [Switch]$SkipCertificateCheck
  )

  $uri = [Uri]"https://$($Session.Hostname)/api/network-device"

  $headers = @{
    "Authorization" = "Bearer $($Session.AccessToken)"
    "Accept" = "application/json"
  }

  $body = @{
    "name"            = $Name
    "description"     = $Description
    "ip_address"      = $IpAddress
    "vendor_name"     = $VendorName
    "radius_secret"   = $RadiusSecret
    "tacacs_secret"   = $TacacsSecret
    "coa_capable"     = $CoaCapable
    "coa_port"        = $CoaPort
    "radsec_enabled"  = $RadsecEnabled
    "attributes"      = $Attributes
  } | ConvertTo-Json -Depth 100
  
  $params = @{
    Uri = $uri.OriginalString
    Method = "Post"
    Body = $body
    Headers = $headers
    ContentType = "application/json"
    SkipCertificateCheck = $SkipCertificateCheck
  }

  try{
    $response = Invoke-RestMethod @params

    $networkDevice = [NetworkDevice]@{
      Id              = $response.id
      Name            = $response.name
      Description     = $response.description
      IpAddress       = $response.ip_address
      VendorName      = $response.vendor_name
      CoaCapable      = $response.coa_capable
      CoaPort         = $response.coa_port
      RadsecEnabled   = $response.radsec_enabled
      Attributes      = $response.attributes
    }

    Write-Output $networkDevice
  }
  catch {
    Write-Error $_
  }
}