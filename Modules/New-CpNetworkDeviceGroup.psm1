<#
.SYNOPSIS
  A module for creating new ClearPass device groups.
.DESCRIPTION
  A module for creating new ClearPass device groups.
.PARAMETER Session
  Mandatory. A ClearPass session generated by New-CpSession.
.PARAMETER Name
  Mandatory. Friendly name of the network device group.
.PARAMETER Description
  Optional. A description of the network device group.
.PARAMETER GroupFormat
  Optional. The format of the network devices.

  Valid entires:
    subnet
    regex
    list
.PARAMETER Value
  Mandatory. The network device value as defined by the GroupFormat.
.PARAMETER SkipCertificateCheck
  Optional. Don't verify server certificate when making service calls.
.EXAMPLE
  New-CpNetworkDeviceGroup -Name "NetworkDevices" -Description "A group of network devices" -GroupFormat "list" -Value "10.1.1.1, 10.1.1.2"
  
  This will create a new device group called "NetworkDevices" and will have a network device format of "list" with the value of "10.1.1.1, 10.1.1.12"

.EXAMPLE
  New-CpNetworkDeviceGroup -name "NetworkDevices" -Description "A group of network devices" -GroupFormat "subnet" -Value "10.1.1.0/24"

  This will create a new device group called "NetworkDevices" and will have a network device format of "subnet" with the value of "10.1.1.0/24"

.EXAMPLE
  New-CpNetworkDeviceGroup -name "NetworkDevices" -Description "A group of network devices" -GroupFormat "regex" -Value "pro-network*"

  This will create a new device group called "NetworkDevices" and will have a network device format of "regex" with the value of "pro-network*"
.INPUTS
  Inputs from parameters
.OUTPUTS
  <NetworkDeviceGroup>
.NOTES
  Before using this module, you must create an API session using New-CpSession.
#>
function New-CpNetworkDeviceGroup {
  [CmdletBinding()]
  param (
    [Parameter(
      Mandatory = $false,
      HelpMessage = "A ClearPass session generated by New-CpSession.")]
    [Session]$Session=$global:CpSession,

    [Parameter(
      Mandatory = $true,
      HelpMessage = "Friendly name of network device group.")]
    [String]$Name,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "A description of the network device group.")]
    [String]$Description,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "The format of the network devices.")]
    [ValidateSet("subnet", "regex", "list")]
    [String]$GroupFormat="list",

    [Parameter(
      Mandatory = $true,
      HelpMessage = "The network device value as defined by the GroupFormat.")]
    [String]$Value,

    [Parameter(
      Mandatory = $false,
      HelpMessage = "Don't verify server certificate when making service calls.")]
    [Switch]$SkipCertificateCheck
  )

  $uri = [Uri]"https://$($Session.Hostname)/api/network-device-group"

  $headers = @{
    "Authorization" = "Bearer $($Session.AccessToken)"
    "Accept" = "application/json"
  }

  $body = @{
    "name"            = $Name
    "description"     = $Description
    "group_format"    = $GroupFormat
    "value"           = $Value
  } | ConvertTo-Json -Depth 100
  
  $params = @{
    Uri = $uri.OriginalString
    Method = "Post"
    Body = $body
    Headers = $headers
    ContentType = "application/json"
    SkipCertificateCheck = $SkipCertificateCheck
  }

  try{
    $response = Invoke-RestMethod @params

    $networkDeviceGroup = [NetworkDeviceGroup]@{
      Id              = $response.id
      Name            = $response.name
      Description     = $response.description
      GroupFormat     = $response.group_format
      Value           = $response.value
    }

    Write-Output $networkDeviceGroup
  }
  catch {
    Write-Error $_
  }
}